from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import Service_QA_RAG  # Assure-toi que ce module existe et est correctement import√©
import time

'''
FastAPI, c'est un framework web en Python utilis√© pour cr√©er des API rapides et performantes. 
Il est bas√© sur Starlette pour la gestion des requ√™tes et Pydantic pour la validation des donn√©es.
'''

app = FastAPI()

# üöÄ Ajout du middleware CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # üî• Remplace par ["http://localhost:5500"] si n√©cessaire
    allow_credentials=True,
    allow_methods=["*"],  # ‚úÖ Autorise toutes les m√©thodes (GET, POST, OPTIONS, etc.)
    allow_headers=["*"],  # ‚úÖ Autorise tous les headers
)

# model, tokenizer = Service_QA_RAG.Load_LLaMA2_From_HuggingFace()
# if model != None and tokenizer != None:
#     print("Le model charger avec succees!")
# else:
#     print("Problem dans le chargement du model !")

class QueryRequest(BaseModel):
    question: str
    role: str

'''
@app.post("/query")
async def query_rag(request: QueryRequest):
    print(f"Requ√™te re√ßue : {request.role} - {request.question}")  # Log pour debug
    #response = Service_QA_RAG.ask_question(request.role, request.question)
    response = Service_QA_RAG.query(request.question, request.role)
    print(f"R√©ponse envoy√©e : {response}")  # Log pour debug
    return {"answer": response}
'''

@app.get("/")
async def hello():
    return "Hello !"

@app.post("/query")
async def query_rag(request: QueryRequest):
    start_time = time.time()  # D√©marrage du chronom√®tre

    print(f"Requ√™te re√ßue : {request.role} - {request.question}")  # Log pour debug

    # Traitement de la requ√™te
    #response = Service_QA_RAG.query(model, tokenizer, request.question, request.role)
    response = Service_QA_RAG.query(request.question, request.role)

    end_time = time.time()  # Fin du chronom√®tre
    duration = end_time - start_time  # Dur√©e d'ex√©cution

    print(f"R√©ponse envoy√©e : {response}")  # Log pour debug
    print(f"Dur√©e d'ex√©cution : {duration:.4f} secondes")  # Affichage de la dur√©e

    return {"answer": response, "execution_time": f"{duration:.4f} secondes"}

# uvicorn app:app --reload